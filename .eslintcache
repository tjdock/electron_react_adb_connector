[{"D:\\Html5Project\\electron_adb_template\\src\\index.tsx":"1","D:\\Html5Project\\electron_adb_template\\src\\store\\user\\actions.ts":"2","D:\\Html5Project\\electron_adb_template\\src\\App.tsx":"3","D:\\Html5Project\\electron_adb_template\\src\\store\\index.ts":"4","D:\\Html5Project\\electron_adb_template\\src\\store\\user\\types.ts":"5","D:\\Html5Project\\electron_adb_template\\src\\routes.config.ts":"6","D:\\Html5Project\\electron_adb_template\\src\\store\\main\\actions.ts":"7","D:\\Html5Project\\electron_adb_template\\src\\store\\main\\types.ts":"8","D:\\Html5Project\\electron_adb_template\\src\\store\\user\\reducers.ts":"9","D:\\Html5Project\\electron_adb_template\\src\\store\\main\\reducers.ts":"10","D:\\Html5Project\\electron_adb_template\\src\\store\\dict\\reducers.ts":"11","D:\\Html5Project\\electron_adb_template\\src\\pages\\Login.tsx":"12","D:\\Html5Project\\electron_adb_template\\src\\pages\\404.tsx":"13","D:\\Html5Project\\electron_adb_template\\src\\service\\IpcService.ts":"14"},{"size":1770,"mtime":1611216988297,"results":"15","hashOfConfig":"16"},{"size":1780,"mtime":1611104388186,"results":"17","hashOfConfig":"16"},{"size":7141,"mtime":1611274639541,"results":"18","hashOfConfig":"16"},{"size":518,"mtime":1611216988302,"results":"19","hashOfConfig":"16"},{"size":950,"mtime":1611104407622,"results":"20","hashOfConfig":"16"},{"size":1025,"mtime":1611216754940,"results":"21","hashOfConfig":"16"},{"size":1963,"mtime":1611274713403,"results":"22","hashOfConfig":"16"},{"size":1418,"mtime":1610686798550,"results":"23","hashOfConfig":"16"},{"size":376,"mtime":1611104377645,"results":"24","hashOfConfig":"16"},{"size":1101,"mtime":1610686798547,"results":"25","hashOfConfig":"16"},{"size":1104,"mtime":1610686798506,"results":"26","hashOfConfig":"16"},{"size":1814,"mtime":1611216854763,"results":"27","hashOfConfig":"16"},{"size":367,"mtime":1611216713397,"results":"28","hashOfConfig":"16"},{"size":1144,"mtime":1611218384655,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ohddz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"D:\\Html5Project\\electron_adb_template\\src\\index.tsx",[],["63","64"],"D:\\Html5Project\\electron_adb_template\\src\\store\\user\\actions.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\App.tsx",["65","66","67"],"import React, { Suspense, useEffect, useState, FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Switch, Route, useLocation, useHistory } from 'react-router-dom';\r\nimport { Button, Menu, Dropdown } from 'antd';\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\nimport './App.scss';\r\nimport logo from './assets/logo.png';\r\nimport { RootState } from './store';\r\n// import {login} from \"./store/main/actions\";\r\nimport { Dict, MenuBar } from './store/dict/types';\r\nimport { routesConfigs } from './routes.config';\r\nimport { logout } from './store/main/actions';\r\nimport { LOGIN } from './store/main/types';\r\n\r\nconst App: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const displayName = useSelector((state: RootState) => state.main.displayName);\r\n  const menus = useSelector((state: RootState) => state.dict.menus);\r\n  const roles = useSelector((state: RootState) => state.main.roles);\r\n\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  //取当前路由名称，让菜单高亮\r\n  const [current, setCurrent] = useState(location.pathname.split('/')[1]);\r\n  const [openKeys, setOpenKeys] = useState(new Array<string>());\r\n  const rootPath = useSelector((state: RootState) => state.main.rootPath);\r\n\r\n  useEffect(() => {\r\n    console.log('current=' + current);\r\n\r\n    if (current === \"\") {\r\n      //setCurrent('login');\r\n      history.push(\"/login\");\r\n    }\r\n    if (rootPath && current === \"\") {\r\n      setCurrent(rootPath.split(\"/\")[1]);\r\n      history.push(rootPath);\r\n    }\r\n\r\n    //展开所在菜单\r\n    menus.forEach((menu) => {\r\n      if (menu.ID === current) {\r\n        setOpenKeys([current]);\r\n        menu.children.forEach((m) => {\r\n          let _id = m.ID ? m.ID.toString() : '';\r\n          if (_id === location.pathname.split('/')[2]) {\r\n            setCurrent(_id);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    if (localStorage.getItem(\"user\") && current === \"\" && rootPath === null) {\r\n      //取localStorage 自动登录\r\n      console.log(localStorage.getItem(\"user\"));\r\n\r\n      var users = localStorage.getItem(\"user\");\r\n      if (users) {\r\n        var user = JSON.parse(users);\r\n        //dispatch(login(user[0].userName, user[0].password));\r\n        //dispatch({ type: LOGIN, username: user[0].userName, password: user[0].password });\r\n      }\r\n    }\r\n  }, [dispatch, menus, current, location.pathname, history, rootPath]);\r\n\r\n  //折叠菜单\r\n  const toggleCollapsed = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  //点击左侧菜单\r\n  const menuClickHandler = (e: any) => {\r\n    if (openKeys.length === 1) {\r\n      history.push('/' + openKeys[0] + '/' + e.key);\r\n    } else {\r\n      history.push('/' + e.key);\r\n    }\r\n    setCurrent(e.key);\r\n  };\r\n\r\n  //展开左侧菜单\r\n  const openChangeHandler: any = (arr: string[]) => {\r\n    const latestOpenKey = arr.find((key) => openKeys.indexOf(key) === -1);\r\n    if (menus.map((m) => m.ID).indexOf(latestOpenKey || '') === -1) {\r\n      setOpenKeys(arr);\r\n    } else {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n    }\r\n  };\r\n\r\n  //注销功能\r\n  const onLogoutClickHandler = () => {\r\n    localStorage.clear();\r\n    // window.location.href = './login.html';\r\n    let url = `/login`;\r\n    //dispatch(selectInfr(row));\r\n\r\n    history.push(url);\r\n    setCurrent(\"\");\r\n    setOpenKeys([]);\r\n    dispatch(logout());\r\n  };\r\n\r\n  const goHome = () => {\r\n    setOpenKeys([]);\r\n    setCurrent('home');\r\n    history.push('/home');\r\n  }\r\n\r\n  //注销，切换用户\r\n  const dropdown = () => (\r\n    <Menu>\r\n      <Menu.Item>\r\n        <a\r\n          rel=\"noopener noreferrer\"\r\n          href=\"#\"\r\n          onClick={() => onLogoutClickHandler()}\r\n        >\r\n          注销\r\n        </a>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className={['left', collapsed ? 'collapsed' : ''].join(' ')}>\r\n        <div className=\"top\">\r\n          <Button\r\n            type=\"link\"\r\n            onClick={toggleCollapsed}\r\n            icon={\r\n              collapsed ? (\r\n                <MenuUnfoldOutlined style={{ color: 'white' }} />\r\n              ) : (\r\n                  <MenuFoldOutlined style={{ color: 'white' }} />\r\n                )\r\n            }\r\n          />\r\n        </div>\r\n        <Menu\r\n          className=\"custSubmenu\"\r\n          mode=\"inline\"\r\n          theme=\"light\"\r\n          inlineCollapsed={collapsed}\r\n          onClick={menuClickHandler}\r\n          selectedKeys={[current]}\r\n          openKeys={openKeys}\r\n          onOpenChange={openChangeHandler}\r\n        >\r\n          {menus\r\n            .filter((menu: MenuBar) => {\r\n              return menu.role ? roles.indexOf(menu.role) > -1 : true;\r\n            })\r\n            .map((menu: MenuBar) => {\r\n              if (menu.children.length > 0) {\r\n                return (\r\n                  <Menu.SubMenu\r\n                    disabled={rootPath == null}\r\n                    key={menu.ID}\r\n                    title={\r\n                      <span>\r\n                        <menu.icon />\r\n                        <span>{menu.Title}</span>\r\n                      </span>\r\n                    }\r\n                  >\r\n                    {menu.children.map((m: Dict) => (\r\n                      <Menu.Item key={m.ID}>\r\n                        <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                        <span>{m.Title}</span>\r\n                      </Menu.Item>\r\n                    ))}\r\n                  </Menu.SubMenu>\r\n                );\r\n              } else {\r\n                return (\r\n                  <Menu.Item key={menu.ID}>\r\n                    <menu.icon />\r\n                    <span>{menu.Title}</span>\r\n                  </Menu.Item>\r\n                );\r\n              }\r\n            })}\r\n        </Menu>\r\n      </div>\r\n      <div className=\"right\">\r\n        <div className=\"top\">\r\n          <img src={logo} alt=\"\" onClick={goHome} />\r\n          <div className=\"logo-title\" onClick={goHome}>\r\n            <p className=\"cn\">中国海油井控管理信息系统</p>\r\n            <p className=\"en\">\r\n              China Offshore oil Well Control Management Information System\r\n            </p>\r\n          </div>\r\n          <div className=\"spacer\" />\r\n          <Dropdown overlay={dropdown}>\r\n            <Button\r\n              type=\"link\"\r\n              style={{ color: 'white' }}\r\n              icon={<UserOutlined style={{ color: 'white' }} />}\r\n            >\r\n              {displayName}\r\n            </Button>\r\n          </Dropdown>\r\n        </div>\r\n        <div className=\"hh\" />\r\n        <Suspense fallback={null}>\r\n          <Switch>\r\n            {routesConfigs.map(\r\n              (r) =>\r\n                r.component && (\r\n                  <Route\r\n                    key={r.path}\r\n                    path={r.path}\r\n                    exact={r.exact}\r\n                    component={r.component}\r\n                  />\r\n                )\r\n            )}\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\Html5Project\\electron_adb_template\\src\\store\\index.ts",["68"],"import { connectRouter } from 'connected-react-router';\r\nimport { createHashHistory } from 'history';\r\nimport { combineReducers } from 'redux';\r\nimport { mainReducer } from './main/reducers';\r\nimport { dictReducer } from './dict/reducers';\r\nimport { userReducer } from './user/reducers';\r\nimport { LOGIN } from './main/types';\r\n\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  router: connectRouter(createHashHistory()),\r\n  main: mainReducer,\r\n  dict: dictReducer,\r\n  user: userReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n//watch main login\r\nexport function* watchMain() {\r\n  //yield takeEvery(LOGIN, loginSaga);\r\n}\r\n","D:\\Html5Project\\electron_adb_template\\src\\store\\user\\types.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\routes.config.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\store\\main\\actions.ts",["69"],"import {\r\n  MainActionTypes,\r\n  SET_ROOT_MENU,\r\n  START_LOADING,\r\n  STOP_LOADING,\r\n  LOGIN,\r\n  LOGIN_SUCCESS,\r\n  SEND_EMAIL,\r\n  LOGOUT,\r\n  LoginAction,\r\n} from './types';\r\nimport { filter, mergeMap } from 'rxjs/operators';\r\nimport { message } from 'antd';\r\nimport { combineEpics } from 'redux-observable';\r\nimport { IpcService } from '../../service/IpcService';\r\nimport { IIpcResponse } from '../../electron/shared/IIpcResponse';\r\n\r\nconst { ipcRenderer } = window.require('electron')\r\nconst ipc = new IpcService();\r\n\r\n\r\nexport function startLoading(): MainActionTypes {\r\n  return { type: START_LOADING };\r\n}\r\n\r\nexport function stopLoading(): MainActionTypes {\r\n  return { type: STOP_LOADING };\r\n}\r\n\r\nexport function setRootMenu(rootMenu: string): MainActionTypes {\r\n  return { type: SET_ROOT_MENU, rootMenu };\r\n}\r\n\r\n// export function login(username: string, password: string): MainActionTypes {\r\n//   return { type: LOGIN, username, password };\r\n// }\r\n\r\nconst login = (action$: any) => action$.pipe(\r\n  filter((action: MainActionTypes) => action.type === LOGIN),\r\n  mergeMap(async (action: LoginAction) => {\r\n    //let data = await ipcRenderer.invoke('login', action.username, action.password);\r\n    const data = await ipc.send<IIpcResponse>('login');\r\n    console.log(data);\r\n\r\n\r\n    if (data) {\r\n      message.success('登录成功');\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n      return { type: LOGIN_SUCCESS, loginName: 11, displayName: 11, roles: [11] };\r\n    } else {\r\n      message.error('登录失败');\r\n    }\r\n  })\r\n)\r\n\r\n\r\nexport function logout() {\r\n  return { type: LOGOUT };\r\n}\r\n\r\nexport function loginSuccess(\r\n  loginName: string,\r\n  displayName: string,\r\n  roles: string[]\r\n): MainActionTypes {\r\n  return { type: LOGIN_SUCCESS, loginName, displayName, roles };\r\n}\r\n\r\nexport function sendEmail(formData: FormData): MainActionTypes {\r\n  return { type: SEND_EMAIL, formData };\r\n}\r\n\r\n\r\nexport const mainEpic = combineEpics(login);","D:\\Html5Project\\electron_adb_template\\src\\store\\main\\types.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\store\\user\\reducers.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\store\\main\\reducers.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\store\\dict\\reducers.ts",[],"D:\\Html5Project\\electron_adb_template\\src\\pages\\Login.tsx",[],["70","71"],"D:\\Html5Project\\electron_adb_template\\src\\pages\\404.tsx",[],"D:\\Html5Project\\electron_adb_template\\src\\service\\IpcService.ts",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":17,"column":10,"nodeType":"78","messageId":"79","endLine":17,"endColumn":15},{"ruleId":"76","severity":1,"message":"80","line":64,"column":13,"nodeType":"78","messageId":"79","endLine":64,"endColumn":17},{"ruleId":"81","severity":1,"message":"82","line":119,"column":9,"nodeType":"83","endLine":123,"endColumn":10},{"ruleId":"76","severity":1,"message":"77","line":7,"column":10,"nodeType":"78","messageId":"79","endLine":7,"endColumn":15},{"ruleId":"76","severity":1,"message":"84","line":18,"column":9,"nodeType":"78","messageId":"79","endLine":18,"endColumn":20},{"ruleId":"72","replacedBy":"85"},{"ruleId":"74","replacedBy":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'LOGIN' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ipcRenderer' is assigned a value but never used.",["87"],["88"],"no-global-assign","no-unsafe-negation"]